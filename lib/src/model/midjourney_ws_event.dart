import 'package:collection/collection.dart';

/// All the events that can be emitted by the Midjourney Websocket
sealed class MidjourneyWSEvent {
  const MidjourneyWSEvent();
}

/// Event that's emitted when a job is successfully submitted to the Midjourney API
final class MidjourneyWSJobSuccessEvent extends MidjourneyWSEvent {
  const MidjourneyWSJobSuccessEvent({
    required this.jobId,
  });

  /// The ID of the job that was submitted
  final String jobId;

  @override
  int get hashCode => jobId.hashCode;

  @override
  bool operator ==(Object other) => other is MidjourneyWSJobSuccessEvent && other.jobId == jobId;

  @override
  String toString() => 'MidjourneyWSJobSuccessEvent(jobId: $jobId)';
}

/// Event that's emitted when the Midjourney Websocket is disconnected
final class MidjourneyWSDisconnectedEvent extends MidjourneyWSEvent {
  /// Creates a [MidjourneyWSDisconnectedEvent].
  ///
  /// [code] is the disconnect code.
  /// [reason] is the disconnect reason.
  const MidjourneyWSDisconnectedEvent({
    this.code,
    required this.reason,
  });

  /// Disconnect code
  final int? code;

  /// Disconnect reason
  final String reason;

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) => other is MidjourneyWSDisconnectedEvent;

  @override
  String toString() => 'MidjourneyWSDisconnectedEvent';
}

/// Event that's emitted when the status of a job changes
final class MidjourneyWSGenerationStatusUpdateEvent extends MidjourneyWSEvent {
  MidjourneyWSGenerationStatusUpdateEvent({
    required this.status,
    required this.jobId,
    this.percentageComplete,
    this.imageType,
    this.images,
  });

  /// Current status of the job
  final MidjourneyWSGenerationStatus status;

  /// The ID of the job
  final String jobId;

  /// The percentage of the job that is complete
  final double? percentageComplete;

  /// The type of image generated by the job, usually this is .webp
  final String? imageType;

  /// A list of images generated by the job.
  ///
  /// - For an imagine job, this will likely be a list of 4 images.
  /// - For an upscale job, this will likely be a list of 1 image.
  ///
  /// When the status is [MidjourneyWSGenerationStatus.completed], this list will be null.
  /// In such cases, you may need to fetch the images from the API using the [jobId].
  ///
  /// The URL format for fetching images is:
  /// `https://cdn.midjourney.com/${JOB_ID}/0_${IMAGE_INDEX}.png`
  ///
  /// - [JOB_ID] is the [jobId].
  /// - [IMAGE_INDEX] is the index of the image in the list.
  ///
  /// For an upscale job, [IMAGE_INDEX] will be 0.
  /// For an imagine job, [IMAGE_INDEX] will be 0, 1, 2, or 3.
  final List<MidjourneyWSGenerationImage>? images;

  @override
  int get hashCode =>
      status.hashCode ^
      jobId.hashCode ^
      percentageComplete.hashCode ^
      imageType.hashCode ^
      DeepCollectionEquality().hash(images);

  @override
  bool operator ==(Object other) =>
      other is MidjourneyWSGenerationStatusUpdateEvent &&
      other.status == status &&
      other.jobId == jobId &&
      other.percentageComplete == percentageComplete &&
      other.imageType == imageType &&
      DeepCollectionEquality().equals(other.images, images);

  @override
  String toString() {
    final buffer = StringBuffer('MidjourneyWSGenerationStatusUpdateEvent(');
    buffer.write('status: $status, ');
    buffer.write('jobId: $jobId, ');
    buffer.write('percentageComplete: $percentageComplete, ');
    buffer.write('imageType: $imageType, ');
    buffer.write('images: $images');
    buffer.write(')');

    return buffer.toString();
  }
}

/// A class representing an image generated by Midjourney WebSocket.
///
/// This class contains the filename and data of the generated image.
///
/// Example usage:
/// ```dart
/// final image = MidjourneyWSGenerationImage(
///   filename: 'example.png',
///   data: 'base64encodeddata',
/// );
/// print(image);
/// ```
class MidjourneyWSGenerationImage {
  MidjourneyWSGenerationImage({
    required this.filename,
    required this.data,
  });

  /// The filename of the image.
  final String filename;

  /// The base64 encoded data of the image.
  final String data;

  @override
  int get hashCode => filename.hashCode ^ data.hashCode;

  @override
  bool operator ==(Object other) =>
      other is MidjourneyWSGenerationImage && other.filename == filename && other.data == data;

  @override
  String toString() => 'MidjourneyWSGenerationImage(filename: $filename, data: $data)';
}

/// The status of a job submitted to the Midjourney API
enum MidjourneyWSGenerationStatus {
  /// Job left the queue and started processing
  unqueue._('unqueue'),

  /// Job is in the queue, but I don't know what this means
  /// It usually happens when the job is 30% complete, maybe
  /// when this is emitted the next event will contain the
  /// image data
  startStage._('start_stage'),

  /// Job is running
  running._('running'),

  /// Job is completed
  completed._('completed'),
  ;

  const MidjourneyWSGenerationStatus._(this.value);

  /// The value of the status
  final String value;

  /// Converts a string value to a [MidjourneyWSGenerationStatus]
  static MidjourneyWSGenerationStatus fromValue(String value) => values.firstWhere((e) => e.value == value);
}
